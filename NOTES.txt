///////////////////////////////////////////////////////////////////////////////
// PROJECT NOTES
///////////////////////////////////////////////////////////////////////////////

 SECTIONS:
   #1: GENERAL NOTES
   #2: ROADMAP

///////////////////////////////////////////////////////////////////////////////
// #1 | GENERAL NOTES
///////////////////////////////////////////////////////////////////////////////

 - Josh Ge, How to Make a Roguelike
    https://youtu.be/jviNpRGuCIU
    https://www.gridsagegames.com/blog/2018/10/how-to-make-a-roguelike/

  - Genre research/other fascinating projects:
    + Zach and Tarn Adams, Dwarf Fortress Design Inspirations
       https://youtu.be/Zh6dnx9FM1g
    + How Two People Created Gaming’s Most Complex Simulation System
       https://youtu.be/1ieGQ_YddX0
    + Dwarf Fortress Creator Explains its Complexity & Origins
       https://youtu.be/VAhHkJQ3KgY
    + Tarn Adams, Villains in Dwarf Fortress
       https://youtu.be/4-7TtPX5uhg
    + The 10-Year Journey of Ultima Ratio Regum: The Culture Generating Roguelike 
       https://youtu.be/giIIoIKntnw
    + Brian Bucklew & Jason Grinblat, End-to-End Procedural Generation in Caves of Qud
       https://youtu.be/jV-DZqdKlnE
    + Jason Grinblat, Procedurally Generating History in Caves of Qud
       https://youtu.be/H0sLa1y3BW4
    + The Birth of the Japanese RPG
       https://youtu.be/fJiwn8iXqOI

 - Render and input
   + Pick a render mode
     + CLI (render and input using built in C# methods)
     + 2D rendering with tilesets (raylib?)
     + Pseudo-3D rendering with a Comanche-like voxel terrain engine and 2D sprites (raylib?)
     + 3D rendering with OpenGL (GLFW or GLFW through raylib?)
   + C# bindings libraries:
     + raylib-cs
        https://github.com/ChrisDill/Raylib-cs
     + GLFW.NET
        https://github.com/ForeverZer0/glfw-net
     + Silk.NET 
        https://github.com/dotnet/Silk.NET
   + Tilesets:
     + Scroll-o-Sprites
        https://www.reddit.com/r/roguelikedev/comments/1dmbxr/art_scrollosprites/
     + Kenney, Micro Roguelike
        https://kenney.nl/assets/micro-roguelike
     + Loveable Rogue
        https://opengameart.org/content/loveable-rogue

  - Programming patterns to try implementing:
    + Command pattern (for all actions performed by characters)
       https://gameprogrammingpatterns.com/command.html
    + Flyweight pattern (for 3d models)
       https://gameprogrammingpatterns.com/flyweight.html
    + Prototype pattern (for JSON data)
       https://gameprogrammingpatterns.com/prototype.html
    + State pattern (for characters)
       https://gameprogrammingpatterns.com/state.html
    + Double buffer (for the framebuffer (when moving to 3D))
    + Game loop (simple one at first, add more complexity later)
    + Update method (turn based at first, possibly real time at a later implementation)
    + Component pattern (at later stage, for all "Entities" in game, character, items, etc.)
    + Event queue pattern ( ... )
    + Object pool pattern ( ... )
    + Observer or Publisher-Subscriber pattern ( ... )
    + Unused patterns:
      + Singleton
      + Bytecode
      + Subclass sandbox
      + Type object
      + Service locator
      + Data locality
      + Dirty flag
      + Spatial partion

 - C# links:
   + Bitwise and shift operators: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators
   + ConsoleKey Enum: https://learn.microsoft.com/en-us/dotnet/api/system.consolekey

 - Console color codes: https://ss64.com/nt/syntax-ansi.html

 - Dotnet building:
   + Build command (windows): dotnet publish -r win-x64 -p:PublishSingleFile=true --self-contained true
   + Build command (linux):   dotnet publish -r linux-x64 -p:PublishSingleFile=true --self-contained true
   + Other well-known RIDs:
     + win-x86
     + linux-arm
     + linux-arm64
     + osx-x64

 - Roguelike Development Resources: https://github.com/marukrap/RoguelikeDevResources

 - PlantUML (UML diagrams): https://plantuml.com/guide


///////////////////////////////////////////////////////////////////////////////
// #2 | ROADMAP
///////////////////////////////////////////////////////////////////////////////

  [ DONE ] Part 1: Make very simple roguelike that renders in the console
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals
     + 2D fixed size map with collision detection
     + Simple map generation using BSP with doors between rooms
     + A player controlled character on the map with turn based movement
     + Field of vision algorithm (requires line of sight/line drawing algorithms)
     + A simple lighting system with dark/light areas and light sources 
       (using Dijkstra algorithm, handling multiple light sources in a single pass)
   
   + Pathfinding algorithms (Breath first search (BFS) / Dijkstra / A*):
     + Amit Patel, Amit’s A* Pages
        http://theory.stanford.edu/~amitp/GameProgramming/
     + Amit Patel, Introduction to the A* Algorithm
        https://www.redblobgames.com/pathfinding/a-star/introduction.html
     + Amit Patel, Implementation of A*
        https://www.redblobgames.com/pathfinding/a-star/implementation.html
     + Amit Patel, Breadth First Search: multiple start points
        https://www.redblobgames.com/pathfinding/distance-to-any/

   + Field of view (FOV) algorithms:
     + Adam Milazzo, Roguelike Vision Algorithms:
        http://www.adammil.net/blog/v125_Roguelike_Vision_Algorithms.html
     + Albert Ford, Vision Visualized
        https://youtu.be/y1zkrTcNJbc
     + Albert Ford, Symmetric Shadowcasting
        https://www.albertford.com/shadowcasting/
     + Bob Nystrom, What the Hero Sees: Field-of-View for Roguelikes
        https://journal.stuffwithstuff.com/2015/09/07/what-the-hero-sees/
   
   + Binary Space Partitioning (BSP) algorithm:
     + https://roguebasin.com/index.php/Basic_BSP_Dungeon_generation
   
   + Dijkstra algorithm:
     + https://www.roguebasin.com/index.php/The_Incredible_Power_of_Dijkstra_Maps
     + https://www.roguebasin.com/index.php/Dijkstra_Maps_Visualized
   
   + Data structure: Object-oriented data structure (object inheritance design)
   
   + Folder structure:
     builds/           // Builds
     docs/             // Documentation
     src/              // Source code
     tests/            // Test code
     README.md         // GitHub readme
     NOTES.txt         // Project notes and external resources
     TODO.txt          // Planned changes/features
     CHANGELOG.txt     // Version history
 

  [ DONE ] Part 2: Make a 3D version of the roguelike using raylib
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals:
     + Bring the previous implementation into the third dimension using
       the raylib library (with GLFW bindings (OpenGL))
     + Make a simple 3D map on a 2D grid by generating some triangles from the map data
     + Represent the player character with a simple geometric shape like a box or a sphere

   + Raylib:
     + Main Cheatsheet
        https://www.raylib.com/cheatsheet/cheatsheet.html
     + Raymath Cheatsheet
        https://www.raylib.com/cheatsheet/raymath_cheatsheet.html
     + C# examples:
        https://github.com/ChrisDill/Raylib-cs/tree/master/Examples

   + Raylib-cs:
     + Github:
        https://github.com/ChrisDill/Raylib-cs 
     + Install command:
        dotnet add package Raylib-cs
   
   + ImGui.NET:
     + Github:
        https://github.com/ImGuiNET/ImGui.NET
     + Install command:
        donet add package ImGui.NET

   + rlImGui-cs:
     + Github:
        https://github.com/raylib-extras/rlImGui-cs
     + Install command:
        dotnet add package rlImgui-cs

  [ IN PROGRESS ] Part 3: 3D world generation
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals:
     + Pick a setting/theme
     + Square tile maps as a cube projected on a sphere (planets)
     + Make a more sophisticated map generator with heightmap, water, biomes, caves
     + Different terrain surface types
     + Render grass, snow, rocks, trees, etc. on top of the terrain
   
   + Settings/themes:
     + Fantasy science fiction
       + Mixing fantasy elements with science fiction and elements of cosmic horror
       + Space wizards
     + Or historically accurate period piece type setting?

   + Cube-to-sphere projection for planets:
     + Jasper Flick, Cube Sphere: Going from Cube to Sphere
        https://catlikecoding.com/unity/tutorials/procedural-meshes/cube-sphere/
     + Amit Patel, Wraparound square tile maps on a sphere
        https://www.redblobgames.com/x/1938-square-tiling-of-sphere/
        https://www.shadertoy.com/view/WtsfRs
     + Zucker, M., & Higashi, Y. (2018): Cube-to-sphere projections for procedural texturing and beyond
        https://www.jcgt.org/published/0007/02/01/paper-lowres.pdf
     + Dimitrijević, A., Lambers, M., & Rančić, D. (2016): Comparison of spherical cube map projections used in planet-sized terrain rendering
        http://casopisi.junis.ni.ac.rs/index.php/FUMathInf/article/viewFile/871/pdf_75
     + Lambers, M. (2019): Survey of Cube Mapping Methods in Interactive Computer Graphics
        https://marlam.de/publications/cubemaps/lambers2019cubemaps.pdf
     + Lu, F., Song, Z., & Fang, X. (2014): Generation of orthogonal curvilinear grids on the sphere surface based on Laplace-Beltrami equations
        https://iopscience.iop.org/article/10.1088/1755-1315/19/1/012012/pdf
   
   + Noise algorithms:
     + (1985) Ken Perlin, An image synthesizer:
        https://dl.acm.org/doi/pdf/10.1145/325165.325247
     + (2002) Ken Perlin, Improving noise:
        https://mrl.nyu.edu/~perlin/paper445.pdf
     + Ken Perlin, Implementing Improved Perlin Noise:
        https://developer.nvidia.com/gpugems/gpugems/part-i-natural-effects/chapter-5-implementing-improved-perlin-noise
     + Ken Perlin, Improved Noise reference implementation (3D)
        https://mrl.cs.nyu.edu/~perlin/noise/
     + Ken Perlin, Improved Noise reference implementation (4D)
        https://mrl.cs.nyu.edu/~perlin/noise/ImprovedNoise4D.java
     + Adrian Biagioli - Understanding Perlin Noise
        https://adrianb.io/2014/08/09/perlinnoise.html
     + OpenSimplex2 (Open-source version of Simplex noise):
        https://github.com/KdotJPG/OpenSimplex2
     + Inigo Quilez, Value noise derivatives:
        https://iquilezles.org/articles/morenoise/
   
   + Noise terrain generation:
     + Inigo Quilez, Painting a Landscape with Maths
        https://youtu.be/BFld4EBO2RE
     + Amit Patel, Noise Functions and Map Generation
        https://www.redblobgames.com/articles/noise/introduction.html
     + Amit Patel, Making maps with noise functions
        https://www.redblobgames.com/maps/terrain-from-noise/
     + Better Mountain Generators That Aren't Perlin Noise or Erosion
        https://youtu.be/gsJHzBTPG0Y

   + Map generation techniques:
     + Herbert Wolverson, Procedural Map Generation Techniques
        https://youtu.be/TlLIOgWYVpI
       + Algorithms mentioned in the talk:
         + BSP
           + Good for a series of connected square rooms
         + Cellular Automata
           + https://roguebasin.com/index.php/Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels
           + https://bfnightly.bracketproductions.com/chapter_27.html
           + Good for organic maps like caves and forests
           + Pathfinding algorithms can be used to remove unreachable areas
         + Drunkard's Walk
           + https://bfnightly.bracketproductions.com/chapter_28.html
           + https://www.roguebasin.com/index.php/Random_Walk_Cave_Generation
           + Organic, player can reach all points
           + Looks like it was carved out by water
           + Good for limestone caverns or similar
         + Diffusion Limited Aggregation
           + https://roguebasin.com/index.php/Diffusion-limited_aggregation
           + https://www.noveltech.dev/unity-procgen-diffusion-aggregation
           + https://bfnightly.bracketproductions.com/chapter_30.html
           + Gives winding open map
           + Can be used on an already existing map for deterioration effect
         + DLA with Central Attractor
           + A space carved out in the center of a map
         + Voronoi Diagrams
           + https://bfnightly.bracketproductions.com/chapter_32.html
           + Looks like a beehive
           + Can make organic cells, useful for city building,
             placing things (characters/items) on maps in groups
         + Perlin/Simplex Noise
           + Can be used for world generation (making heightmaps)
           + Mix in a second noise layer for more detail
         + Dijkstra
           + Can be used to place exit points or items based on accessability
           + Make a "hot path"
           + Order the progression of a story
     + Brian Walker, Procedural level design in Brogue and beyond
        https://youtu.be/Uo9-IcHhq_w
     + Brian Walker, How Does Level Generation Work In Brogue? 
        https://www.rockpapershotgun.com/how-do-roguelikes-generate-levels
     + Amit Patel, Polygonal Map Generation for Games
        http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/
     + Thomas ten Cate, Around The World
       + Part 1: Continents - https://frozenfractal.com/blog/2023/11/2/around-the-world-1-continents/
       + Part 2: Plate tectonics - https://frozenfractal.com/blog/2023/11/13/around-the-world-2-plate-tectonics/
       + Part 3: Hotspots and erosion - https://frozenfractal.com/blog/2023/11/20/around-the-world-3-hotspots-erosion/
       + Part 4: Basic wind - https://frozenfractal.com/blog/2023/12/4/around-the-world-4-basic-wind/
       + Part 6: Wind hacks - https://frozenfractal.com/blog/2023/12/12/around-the-world-6-wind-hacks/
       + Part 7: Temperature and rain - https://frozenfractal.com/blog/2023/12/15/around-the-world-7-temperature-and-rain/
       + Part 8: Seasons - https://frozenfractal.com/blog/2023/12/19/around-the-world-8-seasons/
       + Part 9: Climate - https://frozenfractal.com/blog/2023/12/29/around-the-world-9-climates/
       + Part 10: Fixing the climate - https://frozenfractal.com/blog/2024/1/2/around-the-world-10-fixing-the-climate/
   
   + Inigo Quilez, Smoothstep functions
      https://iquilezles.org/articles/smoothsteps/
 
  Part 4: GUI and map editor
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals
     + Add prefabs to the map (small towns, camps etc.)
     + Add gui and menu system
     + Create terrain editor to edit pre-generated terrain
   
   + GUI:
     + ...

   + Terrain editor:
     + ...


  Part 5: Characters
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals
     + Change data strucutre to Component-Based Design
     + Implement a Manager class to manage creation/deletion of characters and other game-objects + adding/removing components
     + Work on the character class and components
     + Add some test NPCs
     + Add senses and health system
     + Add skill/stat system
  
  + Character
    + Name
    + Type
      + Sub-type
    + Stats
    + Skills
    + Inventory
    + Health
    + State
    + Senses
      + Sight
      + Hearing
      + Touch
      + Smell
  
  + Player character
    + Controllable character
  
   + NPC
     + Non-player controlled character
     + AI
       + Roguelike Radio, AI
          https://youtu.be/T5BUjNi1kBc?si=vsIskF8oPscC5w5z
     + Pathfinding
 

  Part 6: Core gameplay
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals
     + Change from turn based to real time (turn based in combat only)
     + Add items and inventory system
     + Add combat system
     + Add dialogue system
     + Interactions and tasks system
  
   + Items
     + ...

   + Combat
     + ...

   + Dialogue system
     + ...


  Part 7: ???
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + More things
     + Audio
     + Effects/particles
     + Weather system
     + Thousands of other things... :(
     + And more ...


  Part 8: Success
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals:
     + Finish the thing

   + Done and done!


